// <auto-generated />
using System;
using CareerMonitoring.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CareerMonitoring.Api.Migrations
{
    [DbContext(typeof(CareerMonitoringContext))]
    partial class CareerMonitoringContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Abstract.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activated");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Role");

                    b.Property<string>("Surname");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Account");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.AccountActivation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<DateTime>("ActivatedAt");

                    b.Property<Guid>("ActivationKey");

                    b.Property<bool>("Active");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountActivation");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.AccountRestoringPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<bool>("Restored");

                    b.Property<DateTime>("RestoredAt");

                    b.Property<Guid>("Token");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountRestoringPasswords");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<DateTime>("DateOfReceived");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("Course");

                    b.Property<bool>("Graduated");

                    b.Property<string>("NameOfUniversity");

                    b.Property<string>("Specialization");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("CompanyName");

                    b.Property<DateTime>("From");

                    b.Property<bool>("IsCurrentJob");

                    b.Property<string>("Location");

                    b.Property<string>("Position");

                    b.Property<DateTime>("To");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.JobOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<int?>("EmployerId");

                    b.Property<string>("JobType");

                    b.Property<string>("Location");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Position");

                    b.Property<string>("WebsiteAddress");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.ToTable("JobOffers");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("Name");

                    b.Property<string>("Proficiency");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.ProfileLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("Content");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("ProfileLinks");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Answers.Abstract.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("QuestionId");

                    b.Property<string>("QuestionType");

                    b.HasKey("Id");

                    b.ToTable("Answers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Answer");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.LinearScale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<string>("MaxLabel");

                    b.Property<int>("MaxValue");

                    b.Property<string>("MinLabel");

                    b.Property<int>("MinValue");

                    b.Property<int>("SurveyId");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("LinearScales");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.MultipleChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswersOptions");

                    b.Property<string>("Content");

                    b.Property<int>("SurveyId");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("MultipleChoices");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.MultipleGrid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cols");

                    b.Property<string>("Content");

                    b.Property<string>("Rows");

                    b.Property<int>("SurveyId");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("MultipleGrids");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.OpenQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int>("SurveyId");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("OpenQuestions");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Score.LinearScaleScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int?>("LinearScaleId");

                    b.Property<int>("SurveyScoreId");

                    b.HasKey("Id");

                    b.HasIndex("LinearScaleId");

                    b.HasIndex("SurveyScoreId");

                    b.ToTable("LinearScaleScore");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Score.MultipleChoiceScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int>("SurveyScoreId");

                    b.HasKey("Id");

                    b.HasIndex("SurveyScoreId");

                    b.ToTable("MultipleChoiceScore");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Score.MultipleGridScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int>("SurveyScoreId");

                    b.HasKey("Id");

                    b.HasIndex("SurveyScoreId");

                    b.ToTable("MultipleGridScore");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Score.SingleChoiceScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<string>("Result");

                    b.Property<int?>("SingleChoiceId");

                    b.Property<int>("SurveyScoreId");

                    b.HasKey("Id");

                    b.HasIndex("SingleChoiceId");

                    b.HasIndex("SurveyScoreId");

                    b.ToTable("SingleChoiceScores");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Score.SingleGridScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int>("SurveyScoreId");

                    b.HasKey("Id");

                    b.HasIndex("SurveyScoreId");

                    b.ToTable("SingleGridScore");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Score.SurveyScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ReportCreatedAt");

                    b.Property<DateTime>("SurveyCreatedAt");

                    b.Property<int>("SurveyId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyScores");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.SingleChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswersOptions");

                    b.Property<string>("Content");

                    b.Property<string>("MarkedAnswerName");

                    b.Property<int>("SurveyId");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SingleChoices");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.SingleGrid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cols");

                    b.Property<string>("Content");

                    b.Property<string>("Rows");

                    b.Property<int>("SurveyId");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SingleGrids");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Answered");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.CareerOffice", b =>
                {
                    b.HasBaseType("CareerMonitoring.Core.Domains.Abstract.Account");


                    b.ToTable("CareerOffice");

                    b.HasDiscriminator().HasValue("CareerOffice");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Employer", b =>
                {
                    b.HasBaseType("CareerMonitoring.Core.Domains.Abstract.Account");

                    b.Property<string>("CompanyDescription");

                    b.Property<string>("CompanyName");

                    b.Property<string>("Location");

                    b.ToTable("Employer");

                    b.HasDiscriminator().HasValue("Employer");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Graduate", b =>
                {
                    b.HasBaseType("CareerMonitoring.Core.Domains.Abstract.Account");


                    b.ToTable("Graduate");

                    b.HasDiscriminator().HasValue("Graduate");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Student", b =>
                {
                    b.HasBaseType("CareerMonitoring.Core.Domains.Abstract.Account");

                    b.Property<string>("IndexNumber");

                    b.ToTable("Student");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Answers.LinearScaleAnswer", b =>
                {
                    b.HasBaseType("CareerMonitoring.Core.Domains.Surveys.Answers.Abstract.Answer");

                    b.Property<int>("MarkedValue");

                    b.HasIndex("QuestionId");

                    b.ToTable("LinearScaleAnswer");

                    b.HasDiscriminator().HasValue("LinearScaleAnswer");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Answers.MultipleChoiceAnswer", b =>
                {
                    b.HasBaseType("CareerMonitoring.Core.Domains.Surveys.Answers.Abstract.Answer");

                    b.Property<string>("MarkedAnswers");

                    b.HasIndex("QuestionId")
                        .HasName("IX_Answers_QuestionId1");

                    b.ToTable("MultipleChoiceAnswer");

                    b.HasDiscriminator().HasValue("MultipleChoiceAnswer");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Answers.MultipleGridAnswer", b =>
                {
                    b.HasBaseType("CareerMonitoring.Core.Domains.Surveys.Answers.Abstract.Answer");

                    b.Property<string>("ColTitle");

                    b.Property<string>("RowTitle");

                    b.HasIndex("QuestionId")
                        .HasName("IX_Answers_QuestionId2");

                    b.ToTable("MultipleGridAnswer");

                    b.HasDiscriminator().HasValue("MultipleGridAnswer");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Answers.OpenQuestionAnswer", b =>
                {
                    b.HasBaseType("CareerMonitoring.Core.Domains.Surveys.Answers.Abstract.Answer");

                    b.Property<string>("Answer");

                    b.HasIndex("QuestionId")
                        .HasName("IX_Answers_QuestionId3");

                    b.ToTable("OpenQuestionAnswer");

                    b.HasDiscriminator().HasValue("OpenQuestionAnswer");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Answers.SingleChoiceAnswer", b =>
                {
                    b.HasBaseType("CareerMonitoring.Core.Domains.Surveys.Answers.Abstract.Answer");

                    b.Property<string>("MarkedAnswer");

                    b.HasIndex("QuestionId")
                        .HasName("IX_Answers_QuestionId4");

                    b.ToTable("SingleChoiceAnswer");

                    b.HasDiscriminator().HasValue("SingleChoiceAnswer");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Answers.SingleGridAnswer", b =>
                {
                    b.HasBaseType("CareerMonitoring.Core.Domains.Surveys.Answers.Abstract.Answer");

                    b.Property<string>("ColTitle")
                        .HasColumnName("SingleGridAnswer_ColTitle");

                    b.Property<string>("RowTitle")
                        .HasColumnName("SingleGridAnswer_RowTitle");

                    b.HasIndex("QuestionId")
                        .HasName("IX_Answers_QuestionId5");

                    b.ToTable("SingleGridAnswer");

                    b.HasDiscriminator().HasValue("SingleGridAnswer");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.AccountActivation", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Abstract.Account", "Account")
                        .WithOne("AccountActivation")
                        .HasForeignKey("CareerMonitoring.Core.Domains.AccountActivation", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.AccountRestoringPassword", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Abstract.Account", "Account")
                        .WithOne("AccountRestoringPassword")
                        .HasForeignKey("CareerMonitoring.Core.Domains.AccountRestoringPassword", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Certificate", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Abstract.Account", "Account")
                        .WithMany("Certificates")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Course", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Abstract.Account", "Account")
                        .WithMany("Courses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Education", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Abstract.Account", "Account")
                        .WithMany("Educations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Experience", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Abstract.Account", "Account")
                        .WithMany("Experiences")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.JobOffer", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Employer")
                        .WithMany("JobOffers")
                        .HasForeignKey("EmployerId");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Language", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Abstract.Account", "Account")
                        .WithMany("Languages")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.ProfileLink", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Abstract.Account", "Account")
                        .WithOne("ProfileLink")
                        .HasForeignKey("CareerMonitoring.Core.Domains.ProfileLink", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Skill", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Abstract.Account")
                        .WithMany("Skills")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.LinearScale", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.Survey", "Survey")
                        .WithMany("LinearScales")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.MultipleChoice", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.Survey", "Survey")
                        .WithMany("MultipleChoices")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.MultipleGrid", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.Survey", "Survey")
                        .WithMany("MultipleGrids")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.OpenQuestion", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.Survey", "Survey")
                        .WithMany("OpenQuestions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Score.LinearScaleScore", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.LinearScale", "LinearScale")
                        .WithMany()
                        .HasForeignKey("LinearScaleId");

                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.Score.SurveyScore", "SurveyScore")
                        .WithMany("LinearScaleScores")
                        .HasForeignKey("SurveyScoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Score.MultipleChoiceScore", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.Score.SurveyScore", "SurveyScore")
                        .WithMany("MultipleChoiceScores")
                        .HasForeignKey("SurveyScoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Score.MultipleGridScore", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.Score.SurveyScore", "SurveyScore")
                        .WithMany("MultipleGridScores")
                        .HasForeignKey("SurveyScoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Score.SingleChoiceScore", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.SingleChoice", "SingleChoice")
                        .WithMany()
                        .HasForeignKey("SingleChoiceId");

                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.Score.SurveyScore", "SurveyScore")
                        .WithMany("SingleChoiceScores")
                        .HasForeignKey("SurveyScoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Score.SingleGridScore", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.Score.SurveyScore", "SurveyScore")
                        .WithMany("SingleGridScores")
                        .HasForeignKey("SurveyScoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Score.SurveyScore", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.SingleChoice", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.Survey", "Survey")
                        .WithMany("SingleChoices")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.SingleGrid", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.Survey", "Survey")
                        .WithMany("SingleGrids")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Answers.LinearScaleAnswer", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.LinearScale", "LinearScale")
                        .WithMany("LinearScaleAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Answers.MultipleChoiceAnswer", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.MultipleChoice", "MultipleChoice")
                        .WithMany("MultipleChoiceAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Answers.MultipleGridAnswer", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.MultipleGrid", "MultipleGrid")
                        .WithMany("MultipleGridAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Answers.OpenQuestionAnswer", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.OpenQuestion", "OpenQuestion")
                        .WithMany("OpenQuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Answers.SingleChoiceAnswer", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.SingleChoice", "SingleChoice")
                        .WithMany("SingleChoiceAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CareerMonitoring.Core.Domains.Surveys.Answers.SingleGridAnswer", b =>
                {
                    b.HasOne("CareerMonitoring.Core.Domains.Surveys.SingleGrid", "SingleGrid")
                        .WithMany("SingleGridAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
